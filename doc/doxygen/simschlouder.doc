/*!  
@page simschlouder SimSchlouder Documentation

SimSchlouder allows to simulate <a href="http://schlouder.gforge.inria.fr/">Schlouder</a> with SCHIaaS.

It supports main cloud broker management functions for scientific computation:
- Bag-of-Tasks and workflows execution;
- Extensible provisioning and pcheduling policices.

@section Running SimSchlouder

@subsection running_prerequisite Prerequisite

SimSchlouder is packaged with SCHIaaS. After building it, you should have simschlouder.jar inside the bin/simschlouder directory, which you can use directly.

@subsection command_line Command Line

@code
java -cp /usr/local/java/simgrid.jar:../schiaas.jar:simschlouder.jar simschlouder.SimSchlouder <config_file> <input_file> <strategy>
@endcode
Where:
- config_file is a configuration file (see @ref config_file)
- input_file is the file describing the workload to execute (see @ref input_file)
- strategy is the provisioning/strategy to use (see @ref strategy)

For instance:
@code
java -cp /usr/local/java/simgrid.jar:../schiaas.jar:simschlouder.jar simschlouder.SimSchlouder simschlouder.xml tasks/bot.tasks ASAP 
@endcode


@subsection output Output

After the execution, a file named simschlouder.json should be output.
Its format is similar to the <a href="http://schlouder.gforge.inria.fr/index.html#output"> json output from Schlouder</a>.

This output can be visualized using the script btuviewer.sh:
@code
./btuviewer.sh
@endcode
Afterward, you should have a file named simschlouder.pdf in the btuviewer/ sub-directory.
This pdf shows a blue box for each task ran on the rented BTUs.
Inside each blue box: a red box shows the input time; a green box shows the runtime; and an orange box shows the output time.

@section config_file Configuration file

@code
<?xml version='1.0'?>
 <!DOCTYPE simschlouder>
 <simschlouder version="1">
 	<config platform="platform.xml" [deployment="deplyment.xml"] cloud="cloud.xml" standard_power="10e9" />
	<broker id="client" />
	<cloud  id="icps-opst" B0="41.6" B1="6" BTU="3600" shutdown_margin="20" max_instances_per_user="0"/>
	<provisioning>
		<config cloud="icps-opst" storage="myStorage"
			image="opst-image" instance_type="small"/>
	</provisioning>
</simschlouder> 
@endcode

Where:
The config tag has the following attributes:
  - platform and cloud: the Simgrid/SCHIaaS configuration files
  - standard_power: the base unit of CPU power (i.e. the EC2CU)
  - deployment (OPTIONAL) : the Simgrid file, default none

The broker tag must contain the following attributes : 
  - id : the id of the host on wich to deploy the Cloud Controller

The cloud tag must has the following attributes:
  - id: the id of the cloud or of the region to use (as in the cloud configuration file)
  - B0: the time to boot a first instance
  - B1: the delay between two consecutive boots
  - BTU: the Billing Time Unit (e.g. 1 hour for amazon EC2)
  - shutdown_margin: the delay before the end of one BTU when an instance shloud be stopped
  - max_instances_per_user (OPTIONAL) : max instance number allowed simultanusly on the cloud. Default is unlimited, noted "0"

The provisioning tag must have the information needed specifically by the strategy.



@section input_file Input file format

The input of SimSchlouder is the workload to execute.
It is described in a file, which lines are as follows:
@code
<task id> <submit date> <walltime> [~ <runtime> [<input data size> <output data size>]] [-> <task id> ...]
@endcode

For instance, the following line:
@code
0_4 10 3394 ~ 3200 38650 178090 -> 0_1 0_2
@endcode
describes a task:
- named "0_4"
- submitted at t=10s
- whose predicted walltime is 3394s on a host showing a CPU of standard_power 
- running in 3200 seconds on a host showing a CPU of standard_power.
- receiving 38650000 MB as input
- outputting 178090000 MB of data
- being dependent of the tasks "0_1" and "0_2"

Such input files can be produced using the scripts generateBoT.sh and generateConstantBoT.sh.


@section strategy Strategy
 
The strategy define the policy to provision instances and schedule tasks over them.
It is the name of a java class, as can be found the the simschlouder.algorithms package.

For instance ASAP tries to execute the tasks As Soon As Possible, while AFAP tries to use the rented BTU As Full As Possible.

See the javadoc for more information.
*/
